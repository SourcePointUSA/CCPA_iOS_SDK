// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CCPAConsentViewController",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC25CCPAConsentViewController30CCPAConsentViewControllerError")
@interface CCPAConsentViewControllerError : NSError
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController15APIParsingError")
@interface APIParsingError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@end

typedef SWIFT_ENUM(NSInteger, Action, closed) {
  ActionSaveAndExit = 1,
  ActionAcceptAll = 11,
  ActionShowPrivacyManager = 12,
  ActionRejectAll = 13,
  ActionDismiss = 15,
};

@class UserConsent;
@class PropertyName;
@protocol ConsentDelegate;
@class NSBundle;

SWIFT_CLASS("_TtC25CCPAConsentViewController25CCPAConsentViewController")
@interface CCPAConsentViewController : UIViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CCPA_USER_CONSENTS;)
+ (NSString * _Nonnull)CCPA_USER_CONSENTS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONSENT_UUID_KEY;)
+ (NSString * _Nonnull)CONSENT_UUID_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull META_KEY;)
+ (NSString * _Nonnull)META_KEY SWIFT_WARN_UNUSED_RESULT;
/// Contains the <code>ConsentStatus</code>, an array of rejected vendor ids and and array of rejected purposes
@property (nonatomic, strong) UserConsent * _Nonnull userConsent;
/// The UUID assigned to a user, available after calling <code>loadMessage</code>
@property (nonatomic, copy) NSString * _Nullable consentUUID;
/// Instructs the SDK to clean consent data if an error occurs. It’s <code>true</code> by default.
@property (nonatomic) BOOL shouldCleanConsentOnError;
/// \param accountId the id of your account, can be found in the Account section of SourcePoint’s dashboard
///
/// \param propertyId the id of your property, can be found in the property page of SourcePoint’s dashboard
///
/// \param propertyName the exact name of your property,
///
/// \param PMId the id of the PrivacyManager, can be found in the PrivacyManager page of SourcePoint’s dashboard
///
/// \param PMId the id of the PrivacyManager, can be found in the PrivacyManager page of SourcePoint’s dashboard
///
- (nonnull instancetype)initWithAccountId:(NSInteger)accountId propertyId:(NSInteger)propertyId propertyName:(PropertyName * _Nonnull)propertyName PMId:(NSString * _Nonnull)PMId campaign:(NSString * _Nonnull)campaign consentDelegate:(id <ConsentDelegate> _Nonnull)consentDelegate OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadMessage;
- (void)loadPrivacyManager;
/// Remove all consent related data from the UserDefaults
- (void)clearAllConsentData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class PMConsents;

SWIFT_PROTOCOL("_TtP25CCPAConsentViewController15ConsentDelegate_")
@protocol ConsentDelegate
- (void)consentUIWillShow;
@optional
- (void)messageWillShow;
- (void)pmWillShow;
- (void)pmDidDisappear;
- (void)messageDidDisappear;
- (void)onAction:(enum Action)action consents:(PMConsents * _Nullable)consents;
@required
- (void)consentUIDidDisappear;
@optional
- (void)onConsentReadyWithConsentUUID:(NSString * _Nonnull)consentUUID userConsent:(UserConsent * _Nonnull)userConsent;
- (void)onErrorWithError:(CCPAConsentViewControllerError * _Nullable)error;
@end


@interface CCPAConsentViewController (SWIFT_EXTENSION(CCPAConsentViewController)) <ConsentDelegate>
- (void)consentUIWillShow;
- (void)consentUIDidDisappear;
- (void)onErrorWithError:(CCPAConsentViewControllerError * _Nullable)error;
- (void)onAction:(enum Action)action consents:(PMConsents * _Nullable)consents;
- (void)onConsentReadyWithConsentUUID:(NSString * _Nonnull)consentUUID userConsent:(UserConsent * _Nonnull)userConsent;
- (void)messageWillShow;
- (void)messageDidDisappear;
- (void)pmWillShow;
- (void)pmDidDisappear;
@end



/// Indicates the consent status of a given user.
typedef SWIFT_ENUM(NSInteger, ConsentStatus, closed) {
/// Indicates the user has rejected none of the vendors or purposes (categories)
  ConsentStatusRejectedNone = 0,
/// Indicates the user has rejected none of the vendors or purposes (categories)
  ConsentStatusRejectedSome = 1,
/// Indicates the user has rejected none of the vendors or purposes (categories)
  ConsentStatusRejectedAll = 2,
};


SWIFT_CLASS("_TtC25CCPAConsentViewController19GeneralRequestError")
@interface GeneralRequestError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull response;
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController20InvalidArgumentError")
@interface InvalidArgumentError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController24MessageEventParsingError")
@interface MessageEventParsingError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController20NoInternetConnection")
@interface NoInternetConnection : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController9PMConsent")
@interface PMConsent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController10PMConsents")
@interface PMConsents : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// PropertyName is the exact name of your property as created in SourcePoint’s dashboard.
/// It’s important to notice that it can only contain letters, numbers, . (dots), : (semicolons) and / (slashes).
/// The constructor will validate upon that and throw an error otherwise.
SWIFT_CLASS("_TtC25CCPAConsentViewController12PropertyName")
@interface PropertyName : NSObject
/// \param _ the exact name of your property as created in SourcePoint’s dashboard.
///
///
/// throws:
/// <code>InvalidArgumentError</code> if the property name contain anything other than letters, numbers, . (dots), : (semicolons) and / (slashes).
- (nullable instancetype)init:(NSString * _Nonnull)rawValue error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController15URLParsingError")
@interface URLParsingError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController11UserConsent")
@interface UserConsent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC25CCPAConsentViewController12WebViewError")
@interface WebViewError : CCPAConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
